{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","a","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","class","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","preventDefault","uid","photoURL","displayName","add","text","createdAt","FieldValue","serverTimestamp","sentAt","Date","now","current","scrollIntoView","behavior","fetch","method","body","JSON","stringify","embeds","author","name","icon_url","description","headers","map","msg","index","array","ChatMessage","key","id","message","ref","src","alt","type","hidden","for","onSubmit","value","onChange","target","placeholder","props","lastUid","messageClass","toLocaleString","style","marginLeft","marginRight","App","useAuthState","user","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9964d88a.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './App.css';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/analytics';\r\n\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\n\r\n// original css width max size is 728px\r\n\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyAcGTTbY39i_6j42j1t7HGKgxP518HSiuI\",\r\n  authDomain: \"eg-chat-201ac.firebaseapp.com\",\r\n  projectId: \"eg-chat-201ac\",\r\n  storageBucket: \"eg-chat-201ac.appspot.com\",\r\n  messagingSenderId: \"1090164715664\",\r\n  appId: \"1:1090164715664:web:7eb8cea9727653ee182815\",\r\n  measurementId: \"G-BVBB97NN1Y\"\r\n})\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\n\r\nfunction App() {\r\n\r\n  const [user] = useAuthState(auth);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1><span role=\"img\" aria-label=\"eg-verse\">ðŸŒŒ</span> BJH Quizletsï½œprovided by Ethan Pinson</h1>\r\n        <SignOut />\r\n      </header>\r\n\r\n      <section>\r\n        {user ? <ChatRoom /> : <SignIn />}\r\n      </section>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SignIn() {\r\n  return (\r\n    <content-area-2>\r\n      <span className=\"material-icons-round error\">error</span>\r\n      <sign-in-text>you must sign in to use BJH Quizlets</sign-in-text>\r\n      <button className=\"sign-in\" onClick={async () =>{\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        await auth.signInWithPopup(provider);\r\n      }}>sign in with Google</button>\r\n      </content-area-2>\r\n  )\r\n\r\n}\r\n\r\nfunction SignOut() {\r\n  return auth.currentUser && (\r\n    <button className=\"sign-out\" onClick={() => auth.signOut()}><span class=\"material-icons-round\">logout</span>sign out</button>\r\n  )\r\n}\r\n\r\n\r\nfunction ChatRoom() {\r\n  const dummy = useRef();\r\n  const messagesRef = firestore.collection('messages');\r\n  const query = messagesRef.orderBy('createdAt');\r\n\r\n  const [messages] = useCollectionData(query, { idField: 'id' });\r\n\r\n  const [formValue, setFormValue] = useState('');\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { uid, photoURL, displayName } = auth.currentUser;\r\n\r\n    await messagesRef.add({\r\n      text: formValue,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      uid,\r\n      photoURL,\r\n      displayName,\r\n      sentAt: Date.now()\r\n    })\r\n\r\n    setFormValue('');\r\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n\r\n    fetch(`https://discord.com/api/webhooks/942562022242000897/stMTZH4YiZrY4ntjgCTrHZVzMYYFlRTT8qXzb_Q9_g_IYSseYkdT9jsA5seU9qDdLX5M`, {\r\n      method: 'post',\r\n      body: JSON.stringify({\r\n        embeds: [\r\n          {\r\n            author: {\r\n              name: displayName,\r\n              icon_url: photoURL\r\n            },\r\n            description: formValue\r\n          }\r\n        ]\r\n      }),\r\n      headers: {'Content-Type': 'application/json'}\r\n    });\r\n  }\r\n\r\n  // <message-bar-displayname><b>{auth.currentUser.displayName}</b></message-bar-displayname>\r\n\r\n  return (<>\r\n    <main>\r\n\r\n      {messages && messages.map((msg, index, array) => <ChatMessage key={msg.id} message={msg} dummy={dummy} index={index} array={array} />)}\r\n\r\n      <span ref={dummy}></span>\r\n\r\n    </main>\r\n\r\n    <div className=\"App\">\r\n      <message-bar>\r\n        <img className=\"pfp\" src={auth.currentUser.photoURL} alt=\"user avatar\" />\r\n        <input type=\"file\"\r\n       id=\"fileUpload\" name=\"avatar\" hidden/>\r\n       <label className=\"upload-file\" for=\"fileUpload\"><span class=\"material-icons-round\">file_upload</span></label>\r\n        \r\n        <form onSubmit={sendMessage}>\r\n\r\n          <input className=\"msg\" value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something...\"/>\r\n\r\n\r\n        </form>\r\n        <message-bar-send-button onClick={sendMessage}><span class=\"material-icons-round\">send</span></message-bar-send-button>\r\n      </message-bar>\r\n\r\n    </div>\r\n  </>)\r\n}\r\n\r\n\r\nfunction ChatMessage(props) {\r\n  const { text, uid, photoURL } = props.message;\r\n  const lastUid = props.array[props.index - 1]?.uid\r\n\r\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n  props.dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n\r\n  return (<>\r\n  <div className={`name${messageClass}`}><p className=\"msg-date\">{messageClass == 'sent' ? new Date(props.message.sentAt).toLocaleString('en-US') : ''}</p><p>{lastUid != uid ? props.message.displayName : ''} {messageClass == 'received' ? new Date(props.message.sentAt).toLocaleString('en-US') : ''}</p></div>\r\n    <div className={`message ${messageClass}`} style={{marginLeft: lastUid == uid ? '50px' : '0px', marginRight: lastUid == uid ? '50px' : '0px'}}>\r\n      {lastUid != uid ? <img className=\"pfp\" src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} alt=\"user avatar\"/> : <></>}\r\n      <p>{text}</p>\r\n    </div>\r\n  </>)\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}